<?php

namespace App\Livewire;

use App\Models\Post;
use App\Models\UpvoteDownvote as ModelsUpvoteDownvote;
use Livewire\Component;

class UpvoteDownvote extends Component
{
    public Post $post;
    
    public function mount(Post $post){
        $this->post = $post;
    }

    public function render()
    {
        $upvotes= ModelsUpvoteDownvote::where('post_id','=',$this->post->id)
        ->where('is_upvote','=',true)
        ->count();
        $downvotes=  ModelsUpvoteDownvote::where('post_id','=',$this->post->id)
        ->where('is_upvote','=',false)
        ->count();
        //to make color if the user already voted;
        $hasUpvote= null;
        $user = request()->user();
        if($user){
            $model = \App\Models\UpvoteDownvote::where('post_id','=',$this->post->id)
            ->where('user_id','=',$user->id)
            ->first();
            if($model){
                $hasUpvote = !!$model->is_upvote;
            }
          
        }
        
        
        return view('livewire.upvote-downvote',compact('upvotes','downvotes','hasUpvote'));
    }

    public function upvoteDownvote($upvote=true){
        /** @var \App\Models\User $user */
        $user= request()->user();
        if(!$user){
            return $this->redirect('login');
        }
        if(!$user->hasVerifiedEmail()){
            //verification.notice route from auth.php that generated by breeze
            return $this->redirect(route('verification.notice'));
        }
        $model= \App\Models\UpvoteDownvote::where('post_id','=',$this->post->id)
        ->where('user_id','=',$user->id)
        ->first();

        if(!$model){
            \App\Models\UpvoteDownvote::create([
                'is_upvote'=>$upvote,
                'post_id'=>$this->post->id,
                'user_id'=>$user->id,
            ]);
            return;
        }
       
        if($upvote && $model->is_upvote || !$upvote && !$model->is_upvote){
            // if the user is upvote or already upvoted of 
            // if the user is downvote or already downvoted 
            //delete the exitin model (undo the vote )
            $model->delete();
        }
        else{
            //add vote 
            $model->is_upvote=$upvote;
            $model->save();
        }
    }
}
